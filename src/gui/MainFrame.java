/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import entity.Customer;
import entity.TrackedTimeItem;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.HeadlessException;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import logic.Export;
import java.util.concurrent.TimeUnit;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.tree.TreeNode;
import logic.AutoCompletion;
import logic.CustomerService;
import logic.EnumServices;
import logic.TrackedTimeItemService;
import logic.TrackedTimeService;
import logic.UserService;

/**
 *
 * @author Lars
 */
public class MainFrame extends javax.swing.JFrame {

    private Date createdDate = new Date();
    private Timer timer;
    private JLabel jLTemplatePath = new JLabel();
    private String title = ("Timesheet Generator");
    private int userNumber = 0; //add user later on 

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        System.setProperty("apple.eawt.quitStrategy", "CLOSE_ALL_WINDOWS");
        initComponents();
        AutoCompletion.enable(jcbKindOfAction);

        //Set drop down from SQL DB
        EnumServices ES = new EnumServices();
        HashMap<Integer, String> companyStage = ES.getKind();
        String[] toArray = (String[]) companyStage.values().toArray(new String[companyStage.size()]);
        jcbKindOfAction.setModel(new javax.swing.DefaultComboBoxModel<>(toArray));

        //set From and to --> to the first and the last day of the aktuell month 
        Date time = new java.util.Date();
        Calendar calstart = Calendar.getInstance();
        calstart.setTime(time);
        int year = calstart.get(Calendar.YEAR);

        int daysOfMonth = calstart.getActualMaximum(Calendar.DAY_OF_MONTH);
        int month = calstart.get(Calendar.MONTH);
        calstart.set(year, month, 1);
        Date date = calstart.getTime();
        jSFrom.setValue(date);

        Calendar calend = Calendar.getInstance();
        calend.setTime(time);
        calend.set(year, month, daysOfMonth);
        Date date2 = calend.getTime();
        jSto.setValue(date2);

        //Set Usernames form DB to drop down
        UserService US = new UserService();
        ArrayList<String> userNames = US.getUserNames();
        toArray = (String[]) userNames.toArray(new String[userNames.size()]);
        jCbUser.setModel(new javax.swing.DefaultComboBoxModel<>(toArray));

        if (readUserSettings()) {
            buildTree();
        } else {
            JOptionPane.showMessageDialog(null, "Datei saveState nicht vorhanden", "Warnung", JOptionPane.WARNING_MESSAGE);
            buildTree();
        }
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                Color foreground = jLTime.getForeground();
                if (foreground.getRed() == 255) {
                    int n = JOptionPane.showConfirmDialog(
                            null, "Achtung laufende Erfassung!\nWenn Sie mit ok bestätigen, geht dieser Erfassung verloren. \nWenn Sie dies nicht wollen, bestätigen Sie mit nein.",
                            "Schließen",
                            JOptionPane.YES_NO_OPTION);
                    if (n == JOptionPane.YES_OPTION) {
                        System.exit(0);
                    }
                } else {
                    System.exit(0);
                }

            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jPMenue = new javax.swing.JPanel();
        jBnewCustomer = new javax.swing.JButton();
        jBExport = new javax.swing.JButton();
        jBTamplate = new javax.swing.JButton();
        jBDeleteTreeleafs = new javax.swing.JButton();
        jBMail = new javax.swing.JButton();
        jPMenue1 = new javax.swing.JPanel();
        jCbUser = new javax.swing.JComboBox<>();
        jLfrom = new java.awt.Label();
        jSFrom = new javax.swing.JSpinner();
        jlto = new java.awt.Label();
        jSto = new javax.swing.JSpinner();
        jbRefresh = new javax.swing.JButton();
        jPCustomers = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTreeCustomer = new javax.swing.JTree();
        jPanel1 = new javax.swing.JPanel();
        jPCustomorMenue = new javax.swing.JPanel();
        jLKlient = new javax.swing.JLabel();
        jBStartTimeTrack = new javax.swing.JButton();
        jBStopTimeTrack = new javax.swing.JButton();
        jLTime = new javax.swing.JLabel();
        jBDeleteCustomer = new javax.swing.JButton();
        jBRenameCustomer = new javax.swing.JButton();
        jBmasterfiledata = new javax.swing.JButton();
        jPTrackItem = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jTAction = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jCBMark = new javax.swing.JCheckBox();
        jcbKindOfAction = new javax.swing.JComboBox<>();
        jSStartTime = new javax.swing.JSpinner();
        jSStopTime = new javax.swing.JSpinner();
        jBSaveTaskChange = new javax.swing.JButton();
        jBDublicateTask = new javax.swing.JButton();
        jBDeleteTrack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Timesheet Generator");
        setMinimumSize(new java.awt.Dimension(990, 640));

        jPanel4.setBackground(new java.awt.Color(169, 1, 0));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel4.setMaximumSize(new java.awt.Dimension(32767, 63));
        jPanel4.setMinimumSize(new java.awt.Dimension(960, 41));
        jPanel4.setPreferredSize(new java.awt.Dimension(1260, 63));

        jPMenue.setBackground(new java.awt.Color(169, 1, 0));
        jPMenue.setAlignmentX(0.0F);
        jPMenue.setMaximumSize(new java.awt.Dimension(32767, 63));
        jPMenue.setMinimumSize(new java.awt.Dimension(265, 41));
        jPMenue.setPreferredSize(new java.awt.Dimension(265, 63));
        jPMenue.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 25, 15));

        jBnewCustomer.setBackground(new java.awt.Color(169, 1, 0));
        jBnewCustomer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/plus.png"))); // NOI18N
        jBnewCustomer.setToolTipText("neuer Mandant anlegen");
        jBnewCustomer.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jBnewCustomer.setBorderPainted(false);
        jBnewCustomer.setContentAreaFilled(false);
        jBnewCustomer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBnewCustomerMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBnewCustomerMouseEntered(evt);
            }
        });
        jBnewCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBnewCustomerActionPerformed(evt);
            }
        });
        jPMenue.add(jBnewCustomer);

        jBExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/glyphicons-416-disk-open.png"))); // NOI18N
        jBExport.setToolTipText("Export to .xls");
        jBExport.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jBExport.setBorderPainted(false);
        jBExport.setContentAreaFilled(false);
        jBExport.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBExportMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBExportMouseEntered(evt);
            }
        });
        jBExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBExportActionPerformed(evt);
            }
        });
        jPMenue.add(jBExport);

        jBTamplate.setBackground(new java.awt.Color(252, 252, 252));
        jBTamplate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/glyphicons-511-duplicate.png"))); // NOI18N
        jBTamplate.setToolTipText("Template");
        jBTamplate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jBTamplate.setBorderPainted(false);
        jBTamplate.setContentAreaFilled(false);
        jBTamplate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBTamplateMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBTamplateMouseEntered(evt);
            }
        });
        jBTamplate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTamplateActionPerformed(evt);
            }
        });
        jPMenue.add(jBTamplate);

        jBDeleteTreeleafs.setBackground(new java.awt.Color(252, 252, 252));
        jBDeleteTreeleafs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/glyphicons-17-bin.png"))); // NOI18N
        jBDeleteTreeleafs.setToolTipText("Formular leeren");
        jBDeleteTreeleafs.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jBDeleteTreeleafs.setBorderPainted(false);
        jBDeleteTreeleafs.setContentAreaFilled(false);
        jBDeleteTreeleafs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBDeleteTreeleafsMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBDeleteTreeleafsMouseEntered(evt);
            }
        });
        jBDeleteTreeleafs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDeleteTreeleafsActionPerformed(evt);
            }
        });
        jPMenue.add(jBDeleteTreeleafs);

        jBMail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/bug.png"))); // NOI18N
        jBMail.setToolTipText("Report Bug");
        jBMail.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jBMail.setBorderPainted(false);
        jBMail.setContentAreaFilled(false);
        jBMail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBMailMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBMailMouseEntered(evt);
            }
        });
        jBMail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBMailActionPerformed(evt);
            }
        });
        jPMenue.add(jBMail);

        jPMenue1.setBackground(new java.awt.Color(169, 1, 0));
        jPMenue1.setAlignmentX(0.0F);
        jPMenue1.setMaximumSize(new java.awt.Dimension(32767, 63));
        jPMenue1.setMinimumSize(new java.awt.Dimension(770, 41));
        jPMenue1.setPreferredSize(new java.awt.Dimension(770, 63));
        jPMenue1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 15));

        jCbUser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jCbUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCbUserActionPerformed(evt);
            }
        });
        jPMenue1.add(jCbUser);

        jLfrom.setText("von:");
        jPMenue1.add(jLfrom);

        jSFrom.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(1507562815902L), null, null, java.util.Calendar.DAY_OF_MONTH));
        jSFrom.setToolTipText("");
        jSFrom.setAlignmentX(0.0F);
        jSFrom.setAlignmentY(0.0F);
        jSFrom.setEditor(new javax.swing.JSpinner.DateEditor(jSFrom, "dd.MM.yyyy"));
        jPMenue1.add(jSFrom);

        jlto.setText("bis:");
        jPMenue1.add(jlto);

        jSto.setModel(new javax.swing.SpinnerDateModel());
        jSto.setEditor(new javax.swing.JSpinner.DateEditor(jSto, "dd.MM.yyyy"));
        jPMenue1.add(jSto);

        jbRefresh.setBackground(new java.awt.Color(252, 252, 252));
        jbRefresh.setText("aktualisieren");
        jbRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRefreshActionPerformed(evt);
            }
        });
        jPMenue1.add(jbRefresh);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jPMenue, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPMenue1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPMenue, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
            .addComponent(jPMenue1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        jPCustomers.setBackground(new java.awt.Color(204, 204, 204));
        jPCustomers.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Mandanten"));
        jPCustomers.setAutoscrolls(true);
        jPCustomers.setMinimumSize(new java.awt.Dimension(960, 540));
        jPCustomers.setPreferredSize(new java.awt.Dimension(960, 560));

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane1.setAlignmentX(0.0F);
        jScrollPane1.setAlignmentY(0.0F);
        jScrollPane1.setMinimumSize(new java.awt.Dimension(19, 150));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(960, 350));

        jTreeCustomer.setBackground(new java.awt.Color(252, 252, 252));
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Mandanten");
        jTreeCustomer.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTreeCustomer.setAlignmentX(0.0F);
        jTreeCustomer.setAlignmentY(0.0F);
        jTreeCustomer.setAutoscrolls(true);
        jTreeCustomer.setVisibleRowCount(2000);
        jTreeCustomer.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTreeCustomerValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTreeCustomer);
        jTreeCustomer.getAccessibleContext().setAccessibleName("");
        jTreeCustomer.getAccessibleContext().setAccessibleDescription("");

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setAlignmentX(0.0F);
        jPanel1.setAlignmentY(0.0F);
        jPanel1.setPreferredSize(new java.awt.Dimension(960, 140));

        jPCustomorMenue.setBackground(new java.awt.Color(204, 204, 204));
        jPCustomorMenue.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPCustomorMenue.setToolTipText("");
        jPCustomorMenue.setAlignmentX(0.0F);
        jPCustomorMenue.setAlignmentY(0.0F);
        jPCustomorMenue.setMinimumSize(new java.awt.Dimension(960, 41));
        jPCustomorMenue.setPreferredSize(new java.awt.Dimension(960, 50));

        jLKlient.setText("Mandant: X");

        jBStartTimeTrack.setBackground(new java.awt.Color(252, 252, 252));
        jBStartTimeTrack.setText("Start");
        jBStartTimeTrack.setEnabled(false);
        jBStartTimeTrack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBStartTimeTrackActionPerformed(evt);
            }
        });

        jBStopTimeTrack.setBackground(new java.awt.Color(252, 252, 252));
        jBStopTimeTrack.setText("Stopp");
        jBStopTimeTrack.setEnabled(false);
        jBStopTimeTrack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBStopTimeTrackActionPerformed(evt);
            }
        });

        jLTime.setText("Zeit: ");

        jBDeleteCustomer.setBackground(new java.awt.Color(252, 252, 252));
        jBDeleteCustomer.setText("Lösche Mandanten");
        jBDeleteCustomer.setEnabled(false);
        jBDeleteCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDeleteCustomerActionPerformed(evt);
            }
        });

        jBRenameCustomer.setBackground(new java.awt.Color(252, 252, 252));
        jBRenameCustomer.setText("Umbenennen");
        jBRenameCustomer.setEnabled(false);
        jBRenameCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBRenameCustomerActionPerformed(evt);
            }
        });

        jBmasterfiledata.setBackground(new java.awt.Color(252, 252, 252));
        jBmasterfiledata.setText("Stammdaten");
        jBmasterfiledata.setEnabled(false);
        jBmasterfiledata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBmasterfiledataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPCustomorMenueLayout = new javax.swing.GroupLayout(jPCustomorMenue);
        jPCustomorMenue.setLayout(jPCustomorMenueLayout);
        jPCustomorMenueLayout.setHorizontalGroup(
            jPCustomorMenueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPCustomorMenueLayout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addComponent(jLKlient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5)
                .addComponent(jBStartTimeTrack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5)
                .addComponent(jBStopTimeTrack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5)
                .addComponent(jLTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5)
                .addComponent(jBDeleteCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5)
                .addComponent(jBRenameCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBmasterfiledata)
                .addGap(47, 47, 47))
        );
        jPCustomorMenueLayout.setVerticalGroup(
            jPCustomorMenueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPCustomorMenueLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLKlient))
            .addGroup(jPCustomorMenueLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jBStartTimeTrack))
            .addGroup(jPCustomorMenueLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jBStopTimeTrack))
            .addGroup(jPCustomorMenueLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLTime))
            .addGroup(jPCustomorMenueLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jBDeleteCustomer))
            .addGroup(jPCustomorMenueLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPCustomorMenueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBRenameCustomer)
                    .addComponent(jBmasterfiledata)))
        );

        jPTrackItem.setBackground(new java.awt.Color(204, 204, 204));
        jPTrackItem.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPTrackItem.setAlignmentX(0.0F);
        jPTrackItem.setAlignmentY(0.0F);
        jPTrackItem.setMinimumSize(new java.awt.Dimension(960, 80));
        jPTrackItem.setPreferredSize(new java.awt.Dimension(960, 100));

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setMinimumSize(new java.awt.Dimension(960, 0));
        jPanel2.setPreferredSize(new java.awt.Dimension(960, 50));

        jTAction.setMinimumSize(new java.awt.Dimension(900, 26));
        jTAction.setPreferredSize(new java.awt.Dimension(200, 26));
        jTAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTActionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jTAction, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 991, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 62, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addContainerGap(18, Short.MAX_VALUE)
                    .addComponent(jTAction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(18, Short.MAX_VALUE)))
        );

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.setMinimumSize(new java.awt.Dimension(960, 39));
        jPanel3.setPreferredSize(new java.awt.Dimension(960, 50));

        jCBMark.setText("Markieren");

        jcbKindOfAction.setBackground(new java.awt.Color(252, 252, 252));
        jcbKindOfAction.setEditable(true);
        jcbKindOfAction.setMaximumRowCount(20);
        jcbKindOfAction.setToolTipText("");
        jcbKindOfAction.setPreferredSize(new java.awt.Dimension(200, 26));
        jcbKindOfAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbKindOfActionActionPerformed(evt);
            }
        });

        jSStartTime.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.MINUTE));

        jSStopTime.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.MINUTE));

        jBSaveTaskChange.setBackground(new java.awt.Color(252, 252, 252));
        jBSaveTaskChange.setText("speichern");
        jBSaveTaskChange.setEnabled(false);
        jBSaveTaskChange.setMaximumSize(new java.awt.Dimension(80, 29));
        jBSaveTaskChange.setMinimumSize(new java.awt.Dimension(80, 29));
        jBSaveTaskChange.setPreferredSize(new java.awt.Dimension(90, 29));
        jBSaveTaskChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSaveTaskChangeActionPerformed(evt);
            }
        });

        jBDublicateTask.setBackground(new java.awt.Color(252, 252, 252));
        jBDublicateTask.setText("duplizieren");
        jBDublicateTask.setEnabled(false);
        jBDublicateTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDublicateTaskActionPerformed(evt);
            }
        });

        jBDeleteTrack.setBackground(new java.awt.Color(252, 252, 252));
        jBDeleteTrack.setText("löschen");
        jBDeleteTrack.setEnabled(false);
        jBDeleteTrack.setMaximumSize(new java.awt.Dimension(90, 29));
        jBDeleteTrack.setMinimumSize(new java.awt.Dimension(90, 29));
        jBDeleteTrack.setPreferredSize(new java.awt.Dimension(90, 29));
        jBDeleteTrack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDeleteTrackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jCBMark, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5)
                .addComponent(jcbKindOfAction, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5)
                .addComponent(jSStartTime)
                .addGap(5, 5, 5)
                .addComponent(jSStopTime)
                .addGap(5, 5, 5)
                .addComponent(jBSaveTaskChange, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5)
                .addComponent(jBDublicateTask, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5)
                .addComponent(jBDeleteTrack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(25, 25, 25))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jCBMark))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jcbKindOfAction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jSStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jSStopTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jBSaveTaskChange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jBDublicateTask))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jBDeleteTrack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPTrackItemLayout = new javax.swing.GroupLayout(jPTrackItem);
        jPTrackItem.setLayout(jPTrackItemLayout);
        jPTrackItemLayout.setHorizontalGroup(
            jPTrackItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 1022, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 1022, Short.MAX_VALUE)
        );
        jPTrackItemLayout.setVerticalGroup(
            jPTrackItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPTrackItemLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPTrackItem, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
            .addComponent(jPCustomorMenue, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jPCustomorMenue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPTrackItem, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPCustomersLayout = new javax.swing.GroupLayout(jPCustomers);
        jPCustomers.setLayout(jPCustomersLayout);
        jPCustomersLayout.setHorizontalGroup(
            jPCustomersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPCustomersLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPCustomersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPCustomersLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPCustomersLayout.setVerticalGroup(
            jPCustomersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPCustomersLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jPCustomers, javax.swing.GroupLayout.DEFAULT_SIZE, 1045, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 1045, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPCustomers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Creakte new Custemor when the name is unique
     *
     * @param evt
     */
    private void jBnewCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBnewCustomerActionPerformed
        newCustomer nC = new newCustomer(this, true);
        nC.setVisible(true);
        this.setEnabled(true);
        buildTree();
    }//GEN-LAST:event_jBnewCustomerActionPerformed


    private void jTreeCustomerValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTreeCustomerValueChanged
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTreeCustomer.getLastSelectedPathComponent();
        try {
            String s = selectedNode.getUserObject().getClass().getName();// entity.TrackedTimeItem
            Date now;
            switch (s) {
                case Customer.IDENTIFIER:
                    Customer userObject = (Customer) selectedNode.getUserObject();
                    jLKlient.setText("Mandant: " + userObject.getCustomername());
                    jTAction.setText("");
                    jcbKindOfAction.setSelectedIndex(0);
                    now = new java.util.Date();
                    jSStartTime.setValue(now);
                    jSStopTime.setValue(now);
                    jCBMark.setSelected(false);
                    jBDeleteTrack.setEnabled(false);
                    jBSaveTaskChange.setEnabled(false);
                    jBStartTimeTrack.setEnabled(true);
                    jBDeleteCustomer.setEnabled(true);
                    jBRenameCustomer.setEnabled(true);
                    jBmasterfiledata.setEnabled(true);
                    jBDublicateTask.setEnabled(false);
                    break;
                case TrackedTimeItem.IDENTIFIER:
                    TrackedTimeItem trackObject = (TrackedTimeItem) selectedNode.getUserObject();
                    jTAction.setText(trackObject.getKommand());
                    jcbKindOfAction.setSelectedItem(trackObject.getKindOfAction());
                    jSStartTime.setValue(trackObject.getStartTime());
                    jSStopTime.setValue(trackObject.getEndTime());
                    jCBMark.setSelected(trackObject.getMarkInExport());
                    jBDeleteTrack.setEnabled(true);
                    jBSaveTaskChange.setEnabled(true);
                    jBDeleteCustomer.setEnabled(false);
                    jBRenameCustomer.setEnabled(false);
                    jBmasterfiledata.setEnabled(false);
                    jBStartTimeTrack.setEnabled(false);
                    jBStopTimeTrack.setEnabled(false);
                    jBDublicateTask.setEnabled(true);
                    break;
                case "java.lang.String":
                    jLKlient.setText("Mandant: ");
                    jTAction.setText("");
                    jcbKindOfAction.setSelectedIndex(0);
                    now = new java.util.Date();
                    jSStartTime.setValue(now);
                    jSStopTime.setValue(now);
                    jBDeleteTrack.setEnabled(false);
                    jBSaveTaskChange.setEnabled(false);
                    jBDeleteCustomer.setEnabled(false);
                    jBRenameCustomer.setEnabled(false);
                    jBmasterfiledata.setEnabled(false);
                    jBStartTimeTrack.setEnabled(false);
                    jBStopTimeTrack.setEnabled(false);
                    jBDublicateTask.setEnabled(false);
                    break;

            }
        } catch (ClassCastException e) {
            JOptionPane.showMessageDialog(null, "Fehler:" + e.getMessage());
        }


    }//GEN-LAST:event_jTreeCustomerValueChanged

    private void jBStopTimeTrackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBStopTimeTrackActionPerformed
        if (jTAction.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Bitte einen Beschreibungstext eingeben und erneut Stopp betätigen");
            return;
        } else {
            jTreeCustomer.setEnabled(true);
            java.util.Date now = new java.util.Date();
            jSStopTime.setValue(now);
            TrackedTimeItem TTI;
            try {
                DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTreeCustomer.getLastSelectedPathComponent();
                String name = selectedNode.getUserObject().getClass().getName();
                Customer CT;
                DefaultTreeModel model;
                Calendar cal;
                TrackedTimeItemService TTIS = new TrackedTimeItemService();
                switch (name) {
                    case Customer.IDENTIFIER:
                        CT = (Customer) selectedNode.getUserObject();
                        model = (DefaultTreeModel) jTreeCustomer.getModel();
                        TTI = new TrackedTimeItem(createdDate, now, jTAction.getText(), jcbKindOfAction.getSelectedItem().toString(), jCBMark.isSelected(), userNumber);
                        model.insertNodeInto(new DefaultMutableTreeNode(TTI), selectedNode, selectedNode.getChildCount());
                        CT.getCustomeritems().put(TTI.getStartTimeS(), TTI);
                        cal = Calendar.getInstance();
                        cal.setTime(TTI.getEndTime());
                        TTIS.saveTrack(TTI, CT.getId());
                        jBDeleteCustomer.setEnabled(true);
                        jBRenameCustomer.setEnabled(true);
                        jBStartTimeTrack.setEnabled(true);
                        jBStopTimeTrack.setEnabled(false);

                        jBDeleteTrack.setEnabled(false);
                        jBSaveTaskChange.setEnabled(false);
                        jBDublicateTask.setEnabled(false);
                        break;
                    case TrackedTimeItem.IDENTIFIER:
                        DefaultMutableTreeNode selectedNodeParent = (DefaultMutableTreeNode) selectedNode.getParent();
                        CT = (Customer) selectedNodeParent.getUserObject();
                        model = (DefaultTreeModel) jTreeCustomer.getModel();
                        TTI = new TrackedTimeItem(createdDate, now, jTAction.getText(), jcbKindOfAction.getSelectedItem().toString(), jCBMark.isSelected(), userNumber);
                        model.insertNodeInto(new DefaultMutableTreeNode(TTI), selectedNodeParent, selectedNodeParent.getChildCount());
                        CT.getCustomeritems().put(TTI.getStartTimeS(), TTI);
                        cal = Calendar.getInstance();
                        cal.setTime(TTI.getEndTime());
                        TTIS.saveTrack(TTI, CT.getId());
                        jBDeleteCustomer.setEnabled(false);
                        jBRenameCustomer.setEnabled(false);
                        jBStartTimeTrack.setEnabled(false);
                        jBStopTimeTrack.setEnabled(false);

                        jBDeleteTrack.setEnabled(true);
                        jBSaveTaskChange.setEnabled(true);
                        jBDublicateTask.setEnabled(true);
                        break;

                }
                jTAction.setText("");
                jLTime.setText("Zeit");
                jLTime.setForeground(Color.BLACK);
                timer.cancel();
                timer = null;

            } catch (ClassCastException e) {
                JOptionPane.showMessageDialog(this, "Fehler bitte an Programmierer wenden");
            }
        }
    }//GEN-LAST:event_jBStopTimeTrackActionPerformed

    private void jBStartTimeTrackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBStartTimeTrackActionPerformed
        jBStartTimeTrack.setEnabled(false);
        jBDeleteCustomer.setEnabled(false);
        jBRenameCustomer.setEnabled(false);
        jBStopTimeTrack.setEnabled(true);
        jTreeCustomer.setEnabled(false);
        createdDate = new java.util.Date();
        Calendar cal = Calendar.getInstance();
        cal.setTime(createdDate);
        jSStartTime.setValue(createdDate);
        jLTime.setText("Zeit ");
        timer = new Timer();

        TimerTask tt = new TimerTask() {
            @Override
            public void run() {
                jLTime.setText("Zeit " + getAgeInSeconds());
            }
        };
        timer.scheduleAtFixedRate(tt, 10, 1000);

        jLTime.setForeground(Color.red);
    }//GEN-LAST:event_jBStartTimeTrackActionPerformed

    private void jTActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTActionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTActionActionPerformed

    private void jBExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBExportActionPerformed
        if (jLTemplatePath.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Fehler kein Tamplate gefunden", "Export", JOptionPane.ERROR_MESSAGE);
            return;
        }
        JFileChooser fileChooser = new JFileChooser();

        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileNameExtensionFilter xlsxfilter = new FileNameExtensionFilter(
                "xlsx files (*.xlsx)", "xlsx");
        fileChooser.setFileFilter(xlsxfilter);
        fileChooser.setDialogTitle("Speicherort");
        fileChooser.showSaveDialog(this);
        fileChooser.setAcceptAllFileFilterUsed(false);
        File f = fileChooser.getSelectedFile();

        if (fileChooser.getSelectedFile() != null) {
            int n = JOptionPane.YES_OPTION;
            if (f.exists()) {
                n = JOptionPane.showConfirmDialog(
                        this, "Sie überschreiben eine Datei",
                        "Überschreiben",
                        JOptionPane.YES_NO_OPTION);
            }
            if (n == JOptionPane.YES_OPTION) {

                Export exp = new Export(fileChooser, jLTemplatePath.getText());
                try {
                    this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

                    boolean convertXls = exp.convertXls();
                    this.setCursor(Cursor.getDefaultCursor());
                    if (convertXls) {
                        JOptionPane.showMessageDialog(this, "Erfolgreich Exportiert unter: " + fileChooser.getSelectedFile().toString());
                        //export entity delete
                    } else {
                        JOptionPane.showMessageDialog(this, "Leider nicht Erfolgreich Exportiert!");
                    }
                } catch (HeadlessException | IOException | IllegalArgumentException | ParseException ex) {
                    JOptionPane.showMessageDialog(null, "Fehler: " + ex.getMessage(), "Export", JOptionPane.ERROR_MESSAGE);
                }
            }

        }

    }//GEN-LAST:event_jBExportActionPerformed

    private void jBDeleteCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBDeleteCustomerActionPerformed
        int n = JOptionPane.showConfirmDialog(
                this, "Wollen Sie wirklich löschen",
                "Löschen",
                JOptionPane.YES_NO_OPTION);
        if (n == JOptionPane.YES_OPTION) {
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTreeCustomer.getLastSelectedPathComponent();
            try {
                Customer CT = (Customer) selectedNode.getUserObject();
                CustomerService CTS = new CustomerService();
                boolean removeCustomer = CTS.removeCustomer(CT);
                buildTree();
            } catch (ClassCastException ex) {
                JOptionPane.showMessageDialog(null, "Fehler bitte einen Mandanten auswählen", "Fehler", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_jBDeleteCustomerActionPerformed

    private void jBTamplateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTamplateActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter(".xlsx", "xlsx"));
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.showOpenDialog(this);
        if (fileChooser.getSelectedFile() != null) {
            UserService US = new UserService();
            US.setTemplatePathByNumber(userNumber, fileChooser.getSelectedFile().toString());
            jLTemplatePath.setText(fileChooser.getSelectedFile().toString());
            jLTemplatePath.setForeground(new java.awt.Color(252, 252, 252));
            jPMenue1.add(jLTemplatePath);
            SwingUtilities.updateComponentTreeUI(this);
        }
    }//GEN-LAST:event_jBTamplateActionPerformed

    private void jBDeleteTreeleafsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBDeleteTreeleafsActionPerformed
        int n = JOptionPane.showConfirmDialog(
                this, "Wollen Sie wirklich alle Tracks löschen",
                "Löschen",
                JOptionPane.YES_NO_OPTION);
        if (n == JOptionPane.YES_OPTION) {
            CustomerService CTS = new CustomerService();
            CTS.removeAllTimeTracks();
            buildTree();
        }
    }//GEN-LAST:event_jBDeleteTreeleafsActionPerformed

    private void jBSaveTaskChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSaveTaskChangeActionPerformed
        int n = JOptionPane.showConfirmDialog(
                this, "Wollen Sie wirklich Speichern?",
                "Speichern",
                JOptionPane.YES_NO_OPTION);
        if (n == JOptionPane.YES_OPTION) {
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTreeCustomer.getLastSelectedPathComponent();
            DefaultMutableTreeNode selectedNodeParent = (DefaultMutableTreeNode) selectedNode.getParent();
            Customer parent = (Customer) selectedNodeParent.getUserObject();
            TrackedTimeItem TI = (TrackedTimeItem) selectedNode.getUserObject();
            Long key = TI.getStartTimeS();
            int id = TI.getId();
            TI = new TrackedTimeItem((Date) jSStartTime.getModel().getValue(), (Date) jSStopTime.getModel().getValue(), jTAction.getText(), jcbKindOfAction.getSelectedItem().toString(), jCBMark.isSelected(), userNumber);
            TI.setId(id);
            parent.getCustomeritems().remove(key);
            parent.getCustomeritems().put(TI.getStartTimeS(), TI);
            TrackedTimeService TTS = new TrackedTimeService();
            TTS.updateTrackedTime(TI);
            selectedNode.setUserObject(TI);
            DefaultTreeModel model = (DefaultTreeModel) jTreeCustomer.getModel();
            model.reload((TreeNode) selectedNode);
        }
    }//GEN-LAST:event_jBSaveTaskChangeActionPerformed

    private void jBDeleteTrackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBDeleteTrackActionPerformed
        int n = JOptionPane.showConfirmDialog(
                this, "Wollen Sie wirklich löschen",
                "Löschen",
                JOptionPane.YES_NO_OPTION);
        if (n == JOptionPane.YES_OPTION) {
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTreeCustomer.getLastSelectedPathComponent();
            TrackedTimeItem TI = (TrackedTimeItem) selectedNode.getUserObject();
            TrackedTimeService TTS = new TrackedTimeService();
            TTS.removeTrackedTime(TI);
            DefaultTreeModel model = (DefaultTreeModel) jTreeCustomer.getModel();
            jTreeCustomer.setSelectionRow(jTreeCustomer.getSelectionRows()[0] - 1);
            model.removeNodeFromParent(selectedNode);
        }

    }//GEN-LAST:event_jBDeleteTrackActionPerformed

    private void jBDublicateTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBDublicateTaskActionPerformed

        jBDeleteTrack.setEnabled(false);
        jBSaveTaskChange.setEnabled(false);
        jBStartTimeTrack.setEnabled(false);
        jBStopTimeTrack.setEnabled(false);
        jBDeleteCustomer.setEnabled(false);
        jBRenameCustomer.setEnabled(false);
        jBDublicateTask.setEnabled(false);

        jBStopTimeTrack.setEnabled(true);
        jTreeCustomer.setEnabled(false);

        createdDate = new java.util.Date();
        Calendar cal = Calendar.getInstance();
        cal.setTime(createdDate);
        jSStartTime.setValue(createdDate);
        jLTime.setText("Zeit ");
        timer = new Timer();
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                jLTime.setText("Zeit " + getAgeInSeconds());
            }
        }, 10, 1000);
        jLTime.setForeground(Color.red);

        // TODO add your handling code here:
    }//GEN-LAST:event_jBDublicateTaskActionPerformed

    private void jBMailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBMailActionPerformed
        Desktop desktop;
        if (Desktop.isDesktopSupported()
                && (desktop = Desktop.getDesktop()).isSupported(Desktop.Action.MAIL)) {
            URI mailto = null;
            try {
                mailto = new URI("mailto:larslengersdorf@gmail.com?subject=Bug%20Timesheet");
            } catch (URISyntaxException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                desktop.mail(mailto);
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            // TODO fallback to some Runtime.exec(..) voodoo?
            throw new RuntimeException("desktop doesn't support mailto; mail is dead anyway ;)");
        }
    }//GEN-LAST:event_jBMailActionPerformed

    private void jBnewCustomerMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBnewCustomerMouseExited
        jBnewCustomer.setBorderPainted(false);

    }//GEN-LAST:event_jBnewCustomerMouseExited

    private void jBnewCustomerMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBnewCustomerMouseEntered
        jBnewCustomer.setBorderPainted(true);
    }//GEN-LAST:event_jBnewCustomerMouseEntered

    private void jBExportMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBExportMouseEntered
        jBExport.setBorderPainted(true);
    }//GEN-LAST:event_jBExportMouseEntered

    private void jBExportMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBExportMouseExited
        jBExport.setBorderPainted(false);
    }//GEN-LAST:event_jBExportMouseExited

    private void jBMailMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBMailMouseEntered
        jBMail.setBorderPainted(true);
    }//GEN-LAST:event_jBMailMouseEntered

    private void jBMailMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBMailMouseExited
        jBMail.setBorderPainted(false);
    }//GEN-LAST:event_jBMailMouseExited

    private void jBTamplateMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBTamplateMouseEntered
        jBTamplate.setBorderPainted(true);
    }//GEN-LAST:event_jBTamplateMouseEntered

    private void jBTamplateMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBTamplateMouseExited
        jBTamplate.setBorderPainted(false);
    }//GEN-LAST:event_jBTamplateMouseExited

    private void jBDeleteTreeleafsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBDeleteTreeleafsMouseEntered
        jBDeleteTreeleafs.setBorderPainted(true);
    }//GEN-LAST:event_jBDeleteTreeleafsMouseEntered

    private void jBDeleteTreeleafsMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBDeleteTreeleafsMouseExited
        jBDeleteTreeleafs.setBorderPainted(false);
    }//GEN-LAST:event_jBDeleteTreeleafsMouseExited

    private void jcbKindOfActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbKindOfActionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbKindOfActionActionPerformed

    private void jBRenameCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBRenameCustomerActionPerformed
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTreeCustomer.getLastSelectedPathComponent();
        Customer CT = (Customer) selectedNode.getUserObject();
        String S = JOptionPane.showInputDialog("Bitte neuen Mandanten eingeben!", CT.getCustomername());

        CustomerService CTS = new CustomerService();
        TreeMap<String, Customer> allCustomers = CTS.getAllCustomers();

        Customer get = allCustomers.get(S);
        int bevor = allCustomers.size();
        if (get == null) {
            CT.setCustomername(S);

            int saveCustomer = CTS.saveCustomer(CT);

            DefaultTreeModel model = (DefaultTreeModel) jTreeCustomer.getModel();
            DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
            model.insertNodeInto(new DefaultMutableTreeNode(CT), root, root.getChildCount());
        } else {
            JOptionPane.showMessageDialog(null, "Mandant schon vorhanden!");
        }
        if (bevor == 0) {
            jTreeCustomer.expandRow(0);
            jTreeCustomer.setRootVisible(false);
            jTreeCustomer.collapseRow(0);
        }
        buildTree();
    }//GEN-LAST:event_jBRenameCustomerActionPerformed

    private void jbRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRefreshActionPerformed
        buildTree();
    }//GEN-LAST:event_jbRefreshActionPerformed

    private void jBmasterfiledataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBmasterfiledataActionPerformed
        //  JOptionPane.showMessageDialog(null, "Funktion folgt");

        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTreeCustomer.getLastSelectedPathComponent();
        Customer CT = (Customer) selectedNode.getUserObject();
        newCustomer nC = new newCustomer(this, true, CT);
        nC.setVisible(true);

        this.setEnabled(true);
        buildTree();
    }//GEN-LAST:event_jBmasterfiledataActionPerformed

    private void jCbUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCbUserActionPerformed
        userNumber = jCbUser.getSelectedIndex();
        UserService US = new UserService();
        String path = US.getTemplatePathByNumber(userNumber);
        jLTemplatePath.setText(path);
    }//GEN-LAST:event_jCbUserActionPerformed

    private boolean readUserSettings() {
        UserService US = new UserService();
        String path = US.getTemplatePathByNumber(userNumber);
        jLTemplatePath.setText(path);
        jPMenue1.add(jLTemplatePath);
        return true;
    }

    private void buildTree() {
        /*
        ImageIcon leafIcon = new ImageIcon(getClass().getResource("/resources/glyphicons-68-cleaning.png"));
        if (leafIcon != null) {
            DefaultTreeCellRenderer renderer
                    = new DefaultTreeCellRenderer();
            renderer.setLeafIcon(leafIcon);
            jTreeCustomer.setCellRenderer(renderer);

        }
        
            jTreeCustomer.setCellRenderer(new DefaultTreeCellRenderer() {
            private Icon loadIcon = UIManager.getIcon("OptionPane.errorIcon");
            private Icon saveIcon = UIManager.getIcon("OptionPane.informationIcon");
            @Override
            public Component getTreeCellRendererComponent(JTree tree,
                    Object value, boolean selected, boolean expanded,
                    boolean isLeaf, int row, boolean focused) {
                Component c = super.getTreeCellRendererComponent(tree, value,
                        selected, expanded, isLeaf, row, focused);
                if (selected)
                    setIcon(loadIcon);
                else
                    setIcon(saveIcon);
                return c;
            }
        });
         */

        DefaultTreeModel model = (DefaultTreeModel) jTreeCustomer.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
        root.removeAllChildren();
        CustomerService cts = new CustomerService();
        Date value1 = (Date) jSFrom.getValue();
        Date value2 = (Date) jSto.getValue();

        Set set = cts.getAllCustomers(value1, value2).entrySet();

        Iterator iterator = set.iterator();
        while (iterator.hasNext()) {
            Map.Entry mentry = (Map.Entry) iterator.next();
            Customer cusomer = (Customer) mentry.getValue();
            DefaultMutableTreeNode first = new DefaultMutableTreeNode(cusomer);
            model.insertNodeInto(first, root, root.getChildCount());
            TreeMap<Long, TrackedTimeItem> customeritems = cusomer.getCustomeritems();
            for (Map.Entry<Long, TrackedTimeItem> items : customeritems.entrySet()) {

                model.insertNodeInto(new DefaultMutableTreeNode(items.getValue()), first, first.getChildCount());
            }
        }
        if (cts.getAllCustomers().size() != 0) {
            jTreeCustomer.expandRow(0);
            jTreeCustomer.setRootVisible(false);
            jTreeCustomer.collapseRow(0);
        }
        jBDeleteTrack.setEnabled(false);
        jBSaveTaskChange.setEnabled(false);
        jBStartTimeTrack.setEnabled(false);
        jBStopTimeTrack.setEnabled(false);
        jBDeleteCustomer.setEnabled(false);
        jBRenameCustomer.setEnabled(false);

        jBDublicateTask.setEnabled(false);
        SwingUtilities.updateComponentTreeUI(this);
    }

    public String getAgeInSeconds() {
        Calendar cal = Calendar.getInstance();
        java.util.Date now = new java.util.Date();
        cal.setTime(now);
        long diff = now.getTime() - createdDate.getTime();//as given
        String curTime = String.format("%02d:%02d:%02d", TimeUnit.MILLISECONDS.toHours(diff) % 24, TimeUnit.MILLISECONDS.toMinutes(diff) % 60, TimeUnit.MILLISECONDS.toSeconds(diff) % 60);
        return curTime;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBDeleteCustomer;
    private javax.swing.JButton jBDeleteTrack;
    private javax.swing.JButton jBDeleteTreeleafs;
    private javax.swing.JButton jBDublicateTask;
    private javax.swing.JButton jBExport;
    private javax.swing.JButton jBMail;
    private javax.swing.JButton jBRenameCustomer;
    private javax.swing.JButton jBSaveTaskChange;
    private javax.swing.JButton jBStartTimeTrack;
    private javax.swing.JButton jBStopTimeTrack;
    private javax.swing.JButton jBTamplate;
    private javax.swing.JButton jBmasterfiledata;
    private javax.swing.JButton jBnewCustomer;
    private javax.swing.JCheckBox jCBMark;
    private javax.swing.JComboBox<String> jCbUser;
    private javax.swing.JLabel jLKlient;
    private javax.swing.JLabel jLTime;
    private java.awt.Label jLfrom;
    private javax.swing.JPanel jPCustomers;
    private javax.swing.JPanel jPCustomorMenue;
    private javax.swing.JPanel jPMenue;
    private javax.swing.JPanel jPMenue1;
    private javax.swing.JPanel jPTrackItem;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JSpinner jSFrom;
    private javax.swing.JSpinner jSStartTime;
    private javax.swing.JSpinner jSStopTime;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSto;
    private javax.swing.JTextField jTAction;
    private javax.swing.JTree jTreeCustomer;
    private javax.swing.JButton jbRefresh;
    private javax.swing.JComboBox<String> jcbKindOfAction;
    private java.awt.Label jlto;
    // End of variables declaration//GEN-END:variables

}
